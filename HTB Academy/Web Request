- HyperText Transfer Protocol (HTTP):

  - HTTP communication consists of a client and a server, where the client requests the server for a resource. The server processes the requests and returns the requested resource. The default port for HTTP communication is port 80, though this can be changed to any other port, depending on the web server configuration. The same requests are utilized when we use the internet to visit different websites. We enter a Fully Qualified Domain Name (FQDN) as a Uniform Resource Locator (URL) to reach the desired website.

- URL:

  - Resources over HTTP are accessed via a URL, which offers many more specifications than simply specifying a website we want to visit.

    - Example URL:

      - ![alt text](url_structure.webp)

    - Component Legend:

      - Scheme - http://https:// - This is used to identify the protocol being accessed by the client, and ends with a colon and a double slash (://).

      - User Info - admin:password@ - This is an optional component that contains the credentials (separated by a colon :) used to authenticate to the host, and is separated from the host with an at sign (@).

      - Host - inlanefreight.com - The host signifies the resource location. This can be a hostname or IP address.

      - Port - :80 - The Port is separated from the Host by a colon (:). If no port is specified, http schemes default to port 80 and https default to port 443.

      - Path - /dashboard.php - This points to the resource being accessed , which can be a file or a folder. If there is no path specified, the server returns the default index (e.g. index.html).

      - Query String - ?login=true - The query string starts with a question mark (?), and consists of a parameter (e.g. login) and a value (e.g. true). Multiple parameters can be separated by an ampersand (&).

      - Fragments - #status - Fragments are processed by thr browsers on the client-side to locate sections within the primary resources (e.g. a header or section on the page).

  - Not all components are required to access a resource. The main mandatory fields are the scheme and the host, without which the request would have no resource to request.

- HTTP Flow:

  - ![alt text](HTTP_Flow.webp)

  - The diagram above presents the anatomy of an HTTP request at a very high level. The first time a user enters the URL (inlanefreight.com) into the browser, it sends a request to a DNS (Domain Name System) server to resolve the domain and get its IP. The DNS server looks up the IP address for inlanefreight.com and returns it. All domain names need to be resolved this way, as a server can't communicate without an IP address.

    - Our browsers usually first look up records in the local '/etc/hosts' file, and if the requested domain does not exist within it, then they would contact other DNS servers. We can use the '/etc/hosts/' to manually add records to for DNS resolution, by adding the IP followed by the domain name.

  - Once the browser gets the IP address linked to the requested domain, it sends a GET request to the default HTTP prot (e.g. 80), asking for the root / path . Then, the web server receives the request and processes it. By default, servers are configured to return an index file when a request for / is received.

  - In this case, the contents of index. html are read and returned by the web server as an HTTP response. The response also contains the status code (e.g. 200 ok), which indicates that the request was successfully processed. The web browser then renders the index.html contents and present it to the user.

- cURL:

  - Client URL (cURL): is a command-line tool and library that primarily supports HTTP along with many other protocols. This makes it a good candidate for scripts as well as automation, making it essential for sending various types of web requests from the command line, which is necessary for many types of web penetration tests.

  - We can send a basic HTTP request to any URL by using it as an argument for cURL.

  - WE see that cURL does not render the HTML/JavaScript/CSS code, unlike a web browser, but prints it in its raw format. However, as penetration testers, we are mainly interested in the request and response context, which usually becomes much faster and more convenient than a web browser.

  - We may also use cURL to download a page or a file and output the context into a file using the -O flag. If we want to specify the output file name, we can use the -o flat and specify the name. Otherwise , we can use -O and cURL wil use the remote file name.

  - The output was not printed this time but rather saved into index.html Notice that cURL still printed some status while processing the request. We can silent the status with the -s flag.

  - With -s flag cURL prints nothing, as the output was saved into the index.html file. Finally, we use the -h flag to see what other options we may use with cURL.

  - We may use --help all to print a more detailed help menu, or --help category (e.g. -h http) to print the detailed help of a specific flag. If we ever need to read more detailed documentation, we can use man curl to view the full cURL manual page.

- Hypertext Transfer Protocol Secure (HTTPS):

  - HTTPS Overview:

    - If we examine an HTTP request, we can see the effect of not enforcing secure communications between a web browser and a web application.

      - Example: ![alt text](https_clear.webp)

    - We can see that the login credentials can be viewed in clear-text. This would make it easy for someone on the same network (such as a public wireless network) to capture the request and reuse the credentials for malicious purposes.

    - In contrast, when someone intercepts and analyzes traffic from an HTTPS request.

      - Example: ![alt text](https_google_enc.webp)

    - As we can see, the data is transferred a a single encrypted stream, which makes it very difficult for anyone to capture information such as credentials or any other sensitive data.
    - Websites that enforce HTTPS can be identified through https:// in their URL, as well as the lock icon in the address bar of the web browser to the left of the URL.
    - Although the data transferred through the HTTPS protocol may be encrypted, the request may still reveal the visited URL if it contacted a clear-text DNS server. For this reason, it is recommended to utilize encrypted DNS servers (e.g. 8.8.8.8 ro 1.1.1.1), or utilize a VPN service to ensure all traffic is properly encrypted.

- HTTPS Flow:

  - How HTTPS operates at high level:

    - Example : ![alt text](HTTPS_Flow.webp)

  - If we type http:// instead of https:// to visit a website that enforces HTTPS, the browser attempts to resolve the domain and redirects the user to the webserver hosting the target website. A request is sent to port 80 first, which is the unencrypted HTTP protocol. The server detects this and redirects the client to secure HTTPS port 443 instead. This is done via the 301 Moved Permanently response code, which we will discuss in an upcoming section.
  - Next, the client (web browser) sends a "client hello" packet, giving information about itself. After this, the server replies with "server hello", followed by a key exchange to exchange SSL certificates. The client verifies the key/certificate and sends one of its own. After this, an encrypted handshake is initiated to confirm whether the encryption and transfer are working correctly.
  - Once the handshake completes successfully, normal HTTP communication continues, which is encrypted after that. This is a very high-level overview of the key exchange, which is beyond this module's scope.

  - Depending on the circumstances, an attacker may be able to perform an HTTP downgrade attack, which downgrades HTTPS communication to HTTP, making the data transferred in clear-text. This is done by setting up a Man-in-the-Middle (MITM) proxy to transfer all traffic through the attacker's host without the user's knowledge. However, most modern browsers, servers, and web applications protect against this attack.

- cURL for HTTPS:

  - cURL should automatically handle all HTTPS communication standards and perform a secure handshake and then encrypt and decrypt data automatically. However, if we ever contact a website with an invalid SSL certificate or an outdated one, then cURL by default would not proceed with the communication to protect against the earlier mentioned MITM attacks.

  - Modern web browsers would do the same, warning the user against visiting a website with an invalid SSL certificate.

  - We may face such an issue when testing a local web application or with a web application hosted for practice purposes, as such web applications may not yet have implemented a valid SSL certificate. To skip the certificate check with cURL, we can use the -k flag.

- HTTP Requests and Responses;

  - HTTP communications mainly consist of an HTTP request and an HTTP response. An HTTP request is made by the client (e.g. cURL/browser), and is processed by the server (e.g. web server). The requests contain all of the details we require from the server, including the resources (e.g. URL, path, parameters), any request data, headers or options we specify, and many other options.

  - Once the server receives the HTTP request, it processes it and responds by sending the HTTP response, which contains the response code, as discusses in a later section, and may contain the resource data if the requester has access to it.

- HTTP Request:

  - Example HTTP GET request to URL http://inlanefreight.com/users/login.html : ![alt text](raw_request.webp)

  - The first line of any HTTP request contains three main fields 'separated by spaces':

    - Method - GET - The HTTP method or verb, which specifies the type of action to perform.
    - Path - /users/login.html - The path to the resource being accessed. This field can also be suffixed with a query string (e.g. ?username=user)
    - Version - HTTP/1.1 - The third and final field is used to denote the HTTP version.

  - The next set of lines contain HTTP header value pairs, like Host, User-Agent, Cookie, and many other possible headers. These headers are used to specify various attributes of a request. The headers are terminated with a new line, which is necessary for the server to validate the request. Finally, a request may end with the request body and data.

    - HTTP version 1.X sends requests as clear-text, and uses a new-line character to separate different fields and different requests. HTTP version 2.X, on the other hand, sends requests as binary data is a dictionary form.

- HTTP Response;

  - Once the server processes our request, it sends its response.

    - Example HTTP Response: ![alt text](raw_response.webp)

  - The first line of an HTTP response contains two fields separated by spaces. The first being the HTTP version (e.g. HTTP/1.1), and the second denotes the HTTP response code (e.g. 200 ok)

  - Response codes are used to determine the request's status. After the first line, the response lists its headers, similar to an HTTP request.

  - Finally, the response may end with a response body, which is separated by a new line after the headers. The response body is usually defined as HTML code. However, it can slo respond with other code types such as JSON, website resources sech as images, style sheets or scripts, or even a document such as PDF document hosted on the webserver.

- cURL:

  - In earlier examples with cURL, we only specified the URL and got the response body in return. However, cURL also allows us to preview the full HTP request and the full HTTP response, which can become very handy when performing web penetration testing or writing exploits. The view the full HTP request and response, we can simply add the -v verbose flag to our earlier commands, and it should print both the request and response.

  - The -vvv flag shows an even more verbose output. Try to use this flag to see what extra request and response details get displayed with it.

- Browser DevTools:

  - Most modern web browsers com with built-in developer tools (DevTools), which are mainly intended for developers to test their web applications. However, as web penetration testers, these tools can be vital asset in any web assessment we perform.

  - Whenever we visit any website or access any web application, our browser sends multiple web requests adn handles multiple HTTP responses to render the final view we see in the browser window. To open the browser DevTools in either Chrome or Firefox, we can click [CTRL+SHIFT+I] or simply click [F12]. The devtools contain multiple tabs, each of which has its own use.

  - If we click on the network tab and refresh the page, we should be able to see the list of request sent by the page:
  - Example: ![alt text](devtools_network_requests.jpg)

  - Clicking on any of the requests to view their details, then click on the Response tab to view the response body, and then click the Raw button to view the raw (unrendered) source code of the response body.
